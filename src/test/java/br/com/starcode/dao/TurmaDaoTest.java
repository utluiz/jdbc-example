package br.com.starcode.dao;

import java.sql.Connection;
import java.util.Calendar;

import org.h2.jdbcx.JdbcDataSource;
import org.junit.AfterClass;
import org.junit.Assert;
import org.junit.BeforeClass;
import org.junit.Test;

import br.com.starcode.dao.TurmaDao;
import br.com.starcode.domain.Turma;

public class TurmaDaoTest {
	
	private static TurmaDao turmaDao;
	
	/**
	 * Método executado uma vez antes de começar os testes da classe.
	 * Inicializa o DataSource que conecta ao banco de dados.
	 * Cria tabela no banco em memória.
	 */
	@BeforeClass
	public static void setup() throws Exception {
		
		try {
			
			//carregar Driver do banco de dados em memória H2
			Class.forName("org.h2.Driver");

			//inicializar DataSource do H2
			JdbcDataSource ds = new JdbcDataSource();
			ds.setUrl("jdbc:h2:mem:test;DB_CLOSE_DELAY=-1");
			ds.setUser("sa");
			ds.setPassword("sa");
			
			//criar uma conexão diretamente com o DriverManager, caso necessário
			//Connection c = DriverManager.getConnection("jdbc:h2:mem:test", "sa", "sa");
			
			//Obter conexão do DataSource
			Connection c = ds.getConnection();
			
			//Cria tabela no banco em memória
			c.prepareStatement(
					"create table TB_TURMA ( " +
			        " id integer generated by default as identity, " +
			        " descricao varchar(30), " +
			        " inicio_aulas date, " +
			        " primary key (id) )"
			    ).execute();
			
			//cria DAO da turma passando o DataSource
			turmaDao = new TurmaDao(ds);
			
		} catch (Throwable e) {
			e.printStackTrace();
		}
		
	}
	
	@AfterClass
	public static void destroy() throws Exception {
		//finalização: não é necessário
	}

	@Test
	public void testTurma() throws Exception {
		
		Turma novaTurma = new Turma();
		novaTurma.setDescricao("Primeiro Ano");
		Calendar c = Calendar.getInstance();
		c.set(2014, 9, 9, 0, 0, 0);
		c.set(Calendar.MILLISECOND, 0);
		novaTurma.setInicioAulas(c.getTime());

		//insere
		turmaDao.insert(novaTurma);
		
		//verifica lista
		Assert.assertEquals(1, turmaDao.list().size());
		
		//recupera
		Turma t = turmaDao.find(novaTurma.getId());

		//verifica
		Assert.assertEquals("Primeiro Ano", t.getDescricao());
		Assert.assertEquals(new Integer(1), t.getId());
		Assert.assertEquals(c.getTime(), t.getInicioAulas());
		
		//altera
		t.setDescricao("Segundo Ano");
		turmaDao.update(t);
		
		//recupera
		Turma t2 = turmaDao.find(novaTurma.getId());
		
		//verifica
		Assert.assertEquals("Segundo Ano", t2.getDescricao());
		Assert.assertEquals(new Integer(1), t2.getId());
		Assert.assertEquals(c.getTime(), t2.getInicioAulas());
		
		//apaga
		turmaDao.delete(1);
		
		//verifica lista (tem que estar vazia)
		Assert.assertEquals(0, turmaDao.list().size());
		
		//sucesso!
		
	}
	
}
